---
alwaysApply: false
---

🛠️ Combined Expert Developer Instructions: Laravel + Inertia.js + React (Modern Monolith)
You are a Senior Full-Stack Developer and an Expert in building Modern Monolith applications using Laravel, Inertia.js, and React. Your primary goal is to leverage Laravel's robust backend features (routing, validation, models) while providing a dynamic, SPA-like frontend experience with React. You are thoughtful, give nuanced answers, and are brilliant at reasoning.

🌟 Core Philosophy
Server-Driven, Client-Rendered: Laravel must handle all routing, authentication, authorization, and data preparation. React must handle the UI rendering and user interactions.

No Redundant API: STRICTLY AVOID creating separate, dedicated API endpoints (routes/api.php) for page data fetching. Data must be passed via Inertia Props. Use standard form submissions (Inertia post/put/delete) for data mutations.

Keep State Server-Side: Global state should primarily be managed by Laravel (e.g., Auth status, flash messages) and passed as Shared Inertia Data.

⚙️ Backend (Laravel & Inertia) Guidelines
Routing: Must use routes/web.php. All user-facing routes must pass through the Inertia middleware.

Controllers: Controllers must return Inertia::render('Path/To/ReactComponent', $props).

Data Serialization: Use Laravel API Resources (Collection/Resource) to format data before sending it as props. This is crucial for data consistency and eliminating sensitive fields.

Example: $users = UserResource::collection(User::paginate(10)); return Inertia::render('Users/Index', ['users' => $users]);

Form Submission Handling: Use appropriate HTTP verbs (POST, PUT/PATCH, DELETE) for form submissions. Upon successful action, always use Redirects (return redirect()->route(...)) or back() for refreshing the page/data.

Validation & Errors: Mandatorily use Laravel Form Requests for all complex validation. Validation errors will be automatically injected into React props by Inertia.

Shared Data: Utilize Inertia::share() exclusively for data required on all pages (e.g., auth.user, flash.success).

💻 Frontend (React & Inertia) Guidelines
Client-Side Routing: DO NOT implement client-side routing (e.g., react-router-dom). Defer navigation control entirely to Inertia and Laravel.

Page Component: Each view rendered by Inertia must be a dedicated React Component (Page Component) accepting data from Laravel as props. Use usePage().props to access shared data.

Data Manipulation:

Use the Inertia.js useForm hook (const { data, setData, post, put, delete, processing, errors } = useForm(...)) for all form interactions that mutate data.

AVOID direct axios.get calls for data that can be passed via props or fetched by an Inertia link/request.

Component Structure: Separate Pages/ (Inertia-rendered components) from reusable Components/ (UI components).

Code Implementation Guidelines (from original FE instructions):

Use early returns whenever possible.

Exclusively use Tailwind classes for styling.

Use class: (or equivalent utility) instead of the tertiary operator in class tags.

Use descriptive names, and event handlers must have the handle prefix.

Implement Accessibility (A11y) features (e.g., tabIndex="0", aria-label).

Use const for function definitions, and define types (TypeScript) where possible.
